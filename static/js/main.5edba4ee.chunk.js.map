{"version":3,"sources":["components/Editor.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAYe,SAASA,EAAOC,GAC3B,IACIC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAEJ,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIA,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,YAAc,IAAzD,UACI,sBAAKE,UAAU,eAAf,UACKN,EACD,wBAAQO,QAAS,kBAAMF,GAAQ,SAAAG,GAAQ,OAAKA,MAA5C,SACI,cAAC,IAAD,CAAiBC,KAAML,EAAOM,IAAgBC,WAGtD,cAAC,aAAD,CACIC,eAZZ,SAAsBC,EAAYC,EAAUb,GACxCC,EAASD,IAYDA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMnB,EACNoB,MAAO,WACPC,aAAa,QCwBlBC,MA3Df,WACI,MAAqBlB,mBAAS,IAA9B,mBAAOmB,EAAP,KAAYC,EAAZ,KACA,EAAmBpB,mBAAS,IAA5B,mBAAOqB,EAAP,KAAWC,EAAX,KACA,EAAiBtB,mBAAS,IAA1B,mBAAOuB,EAAP,KAAUC,EAAV,KACA,EAA2BxB,mBAAS,IAApC,mBAAOyB,EAAP,KAAcC,EAAd,KAgBA,OAdAC,qBAAU,WACN,IAAMC,EAAUC,YAAW,WACvBH,EAAU,+CAAD,OAEGP,EAFH,2CAGIE,EAHJ,0DAMX,KACF,OAAO,kBAAMS,aAAaF,MAC5B,CAACT,EAAKE,EAAIE,IAKR,qCACI,qBAAKpB,UAAU,WAAf,yBACA,qBAAKA,UAAU,WAAf,uEACA,sBAAKA,UAAU,gBAAf,UACA,cAACT,EAAD,CACCE,SAAS,MACTC,YAAY,OACZC,MAAOqB,EACPpB,SAAUqB,IAEX,cAAC1B,EAAD,CACCE,SAAS,MACTC,YAAY,MACZC,MAAOuB,EACPtB,SAAUuB,IAEX,cAAC5B,EAAD,CACCE,SAAS,aACTC,YAAY,KACZC,MAAOyB,EACPxB,SAAUyB,OAIX,sBAAKrB,UAAU,OAAf,4BAEI,wBACIsB,OAAQA,EACRM,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,gBC5CZC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5edba4ee.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCompressAlt, faExpandAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nexport default function Editor(props: any){\r\n    const{\r\n        language,\r\n        displayName,\r\n        value,\r\n        onChange\r\n    } = props\r\n    const [open, setOpen] = useState(true)\r\n    function handleChange(editor :any,data :any,value :any ){\r\n        onChange(value)\r\n    }\r\n    return (\r\n        <div className={`editor-container ${open ? 'collapsed' : '' }`}>\r\n            <div className=\"editor-title\">\r\n                {displayName}\r\n                <button onClick={() => setOpen(prevOpen => !prevOpen)}>\r\n                    <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt}/>\r\n                </button>\r\n            </div>\r\n            <ControlledEditor\r\n                onBeforeChange={handleChange}\r\n                value={value}\r\n                className=\"code-mirror-wrapper\"\r\n                options={{\r\n                    lineWrapping: true,\r\n                    lint: true,\r\n                    mode: language,\r\n                    theme: 'material',\r\n                    lineNumbers: true \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import { time } from \"console\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Editor from \"./Editor\";\r\n\r\n\r\nfunction App(){\r\n    const [html,setHtml]=useState('') \r\n    const [css,setCss]=useState('') \r\n    const [js,setJs]=useState('') \r\n    const [srcDoc,setSrcDoc] = useState('')\r\n\r\n    useEffect(()=>{\r\n        const timeout = setTimeout(()=>{\r\n            setSrcDoc(`\r\n            <html>\r\n                <body>${html}</body>\r\n                <style>${css}</style>            \r\n            </html>\r\n        `)\r\n        },250)\r\n        return () => clearTimeout(timeout)//waits for 250 ms and then renders the component\r\n    },[html,css,js])\r\n\r\n    //const srcDoc  = \r\n\r\n    return (\r\n        <>\r\n            <div className=\"top-pane\">Hello User,</div>\r\n            <div className=\"top-pane\">Click corresponding buttons to explore/operate the tabs :</div>\r\n            <div className=\"pane top-pane\">\r\n            <Editor \r\n             language=\"xml\"\r\n             displayName=\"HTML\"\r\n             value={html}\r\n             onChange={setHtml}\r\n            />\r\n            <Editor \r\n             language=\"css\"\r\n             displayName=\"CSS\"\r\n             value={css}\r\n             onChange={setCss}\r\n            />\r\n            <Editor \r\n             language=\"javascript\"\r\n             displayName=\"JS\"\r\n             value={js}\r\n             onChange={setJs}\r\n            />             \r\n            </div>\r\n\r\n            <div className=\"pane\">\r\n                Display Section\r\n                <iframe \r\n                    srcDoc={srcDoc}\r\n                    title=\"output\"\r\n                    sandbox=\"allow-scripts\"\r\n                    frameBorder=\"0\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n \n"],"sourceRoot":""}